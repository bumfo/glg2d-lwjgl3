buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        google()
        jcenter()
    }
}

allprojects {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url 'https://repo.maven.apache.org/maven2' }
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
        maven { url 'https://jitpack.io' }
        jcenter()
    }
}

project(':glg2d') {
    apply plugin: 'java'

    dependencies {
        implementation "org.jogamp.gluegen:gluegen-rt-main:$joglVersion"
        implementation "org.jogamp.jogl:jogl-all-main:$joglVersion"
        testImplementation 'junit:junit:4.11'
    }

    group = 'org.jogamp.glg2d'
    version = '0.1-SNAPSHOT'
    description = 'GLG2D-lwjgl3'
    sourceCompatibility = '1.8'

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }
}

apply plugin: 'java'

sourceCompatibility = 1.8
sourceSets.main.java.srcDirs = ["src/"]
sourceSets.main.resources.srcDirs = ["assets/"]

project.ext.mainClassName = "HelloWorld"
project.ext.assetsDir = new File("assets/")

import org.gradle.internal.os.OperatingSystem

switch (OperatingSystem.current()) {
    case OperatingSystem.MAC_OS:
        project.ext.lwjglNatives = System.getProperty("os.arch").startsWith("aarch64") ? "natives-macos-arm64" : "natives-macos"
        break
}

dependencies {
    implementation platform("org.lwjgl:lwjgl-bom:$lwjglVersion")

    implementation "org.lwjgl:lwjgl"
    implementation "org.lwjgl:lwjgl-assimp"
    implementation "org.lwjgl:lwjgl-glfw"
    implementation "org.lwjgl:lwjgl-openal"
    implementation "org.lwjgl:lwjgl-opengl"
    implementation "org.lwjgl:lwjgl-stb"
    runtimeOnly "org.lwjgl:lwjgl::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-assimp::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-glfw::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-openal::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-opengl::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-stb::$lwjglNatives"
    implementation "org.lwjglx:lwjgl3-awt:${lwjgl3_awtVersion}"

    // implementation platform("org.lwjgl:lwjgl-bom:$lwjglVersion")
    //
    // implementation "org.lwjgl:lwjgl"
    // implementation "org.lwjgl:lwjgl-assimp"
    // implementation "org.lwjgl:lwjgl-glfw"
    // implementation "org.lwjgl:lwjgl-openal"
    // implementation "org.lwjgl:lwjgl-opengl"
    // implementation "org.lwjgl:lwjgl-stb"
    // runtimeOnly "org.lwjgl:lwjgl::$lwjglNatives"
    // runtimeOnly "org.lwjgl:lwjgl-assimp::$lwjglNatives"
    // runtimeOnly "org.lwjgl:lwjgl-glfw::$lwjglNatives"
    // runtimeOnly "org.lwjgl:lwjgl-openal::$lwjglNatives"
    // runtimeOnly "org.lwjgl:lwjgl-opengl::$lwjglNatives"
    // runtimeOnly "org.lwjgl:lwjgl-stb::$lwjglNatives"
    // implementation "org.lwjglx:lwjgl3-awt:${lwjgl3_awtVersion}"
}

task run(dependsOn: classes, type: JavaExec) {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    setIgnoreExitValue(true)

    if (org.gradle.internal.os.OperatingSystem.current() == org.gradle.internal.os.OperatingSystem.MAC_OS) {
        // Required to run LWJGL3 Java apps on MacOS
        jvmArgs += "-XstartOnFirstThread"
    }
}

task debug(dependsOn: classes, type: JavaExec) {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    setIgnoreExitValue(true)
    debug = true
}

task dist(type: Jar) {
    manifest {
        attributes 'Main-Class': project.mainClassName
    }
    from {
        configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    with jar
}

dist.dependsOn classes